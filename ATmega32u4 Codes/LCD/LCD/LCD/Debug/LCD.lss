
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002b8  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010c  0080010c  00000358  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000127d  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4d  00000000  00000000  000016dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000632  00000000  00000000  0000232a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  0000295c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e8  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d4  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000383c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 eb       	ldi	r30, 0xB8	; 184
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ac 30       	cpi	r26, 0x0C	; 12
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	ac e0       	ldi	r26, 0x0C	; 12
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ad 30       	cpi	r26, 0x0D	; 13
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
  e2:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <lcd_wr_command>:
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
  ea:	98 2f       	mov	r25, r24
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__data_end>
  f2:	91 b3       	in	r25, 0x11	; 17
  f4:	9f 70       	andi	r25, 0x0F	; 15
  f6:	91 bb       	out	0x11, r25	; 17
  f8:	21 b3       	in	r18, 0x11	; 17
  fa:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
  fe:	92 2b       	or	r25, r18
 100:	91 bb       	out	0x11, r25	; 17
 102:	88 98       	cbi	0x11, 0	; 17
 104:	89 9a       	sbi	0x11, 1	; 17
 106:	ef e1       	ldi	r30, 0x1F	; 31
 108:	fe e4       	ldi	r31, 0x4E	; 78
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_wr_command+0x20>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_wr_command+0x26>
 110:	00 00       	nop
 112:	89 98       	cbi	0x11, 1	; 17
 114:	91 b3       	in	r25, 0x11	; 17
 116:	9f 70       	andi	r25, 0x0F	; 15
 118:	91 bb       	out	0x11, r25	; 17
 11a:	91 b3       	in	r25, 0x11	; 17
 11c:	82 95       	swap	r24
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	89 2b       	or	r24, r25
 122:	81 bb       	out	0x11, r24	; 17
 124:	88 98       	cbi	0x11, 0	; 17
 126:	89 9a       	sbi	0x11, 1	; 17
 128:	8f e1       	ldi	r24, 0x1F	; 31
 12a:	9e e4       	ldi	r25, 0x4E	; 78
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_wr_command+0x42>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_wr_command+0x48>
 132:	00 00       	nop
 134:	89 98       	cbi	0x11, 1	; 17
 136:	08 95       	ret

00000138 <lcd_port_config>:
 138:	80 b3       	in	r24, 0x10	; 16
 13a:	80 6f       	ori	r24, 0xF0	; 240
 13c:	80 bb       	out	0x10, r24	; 16
 13e:	80 9a       	sbi	0x10, 0	; 16
 140:	81 9a       	sbi	0x10, 1	; 16
 142:	08 95       	ret

00000144 <lcd_wr_char>:
 144:	91 b3       	in	r25, 0x11	; 17
 146:	9f 70       	andi	r25, 0x0F	; 15
 148:	91 bb       	out	0x11, r25	; 17
 14a:	91 b3       	in	r25, 0x11	; 17
 14c:	28 2f       	mov	r18, r24
 14e:	20 7f       	andi	r18, 0xF0	; 240
 150:	92 2b       	or	r25, r18
 152:	91 bb       	out	0x11, r25	; 17
 154:	88 9a       	sbi	0x11, 0	; 17
 156:	89 9a       	sbi	0x11, 1	; 17
 158:	ef e1       	ldi	r30, 0x1F	; 31
 15a:	fe e4       	ldi	r31, 0x4E	; 78
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_wr_char+0x18>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_wr_char+0x1e>
 162:	00 00       	nop
 164:	89 98       	cbi	0x11, 1	; 17
 166:	91 b3       	in	r25, 0x11	; 17
 168:	9f 70       	andi	r25, 0x0F	; 15
 16a:	91 bb       	out	0x11, r25	; 17
 16c:	91 b3       	in	r25, 0x11	; 17
 16e:	82 95       	swap	r24
 170:	80 7f       	andi	r24, 0xF0	; 240
 172:	89 2b       	or	r24, r25
 174:	81 bb       	out	0x11, r24	; 17
 176:	88 9a       	sbi	0x11, 0	; 17
 178:	89 9a       	sbi	0x11, 1	; 17
 17a:	8f e1       	ldi	r24, 0x1F	; 31
 17c:	9e e4       	ldi	r25, 0x4E	; 78
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_wr_char+0x3a>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_wr_char+0x40>
 184:	00 00       	nop
 186:	89 98       	cbi	0x11, 1	; 17
 188:	08 95       	ret

0000018a <lcd_cursor>:
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	71 f0       	breq	.+28     	; 0x1aa <lcd_cursor+0x20>
 18e:	18 f4       	brcc	.+6      	; 0x196 <lcd_cursor+0xc>
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	31 f0       	breq	.+12     	; 0x1a0 <lcd_cursor+0x16>
 194:	08 95       	ret
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	69 f0       	breq	.+26     	; 0x1b4 <lcd_cursor+0x2a>
 19a:	84 30       	cpi	r24, 0x04	; 4
 19c:	81 f0       	breq	.+32     	; 0x1be <lcd_cursor+0x34>
 19e:	08 95       	ret
 1a0:	8f e7       	ldi	r24, 0x7F	; 127
 1a2:	86 0f       	add	r24, r22
 1a4:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_command>
 1a8:	08 95       	ret
 1aa:	8f eb       	ldi	r24, 0xBF	; 191
 1ac:	86 0f       	add	r24, r22
 1ae:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_command>
 1b2:	08 95       	ret
 1b4:	83 e9       	ldi	r24, 0x93	; 147
 1b6:	86 0f       	add	r24, r22
 1b8:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_command>
 1bc:	08 95       	ret
 1be:	83 ed       	ldi	r24, 0xD3	; 211
 1c0:	86 0f       	add	r24, r22
 1c2:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_command>
 1c6:	08 95       	ret

000001c8 <lcd_string2>:
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ea 01       	movw	r28, r20
 1ce:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_cursor>
 1d2:	88 81       	ld	r24, Y
 1d4:	88 23       	and	r24, r24
 1d6:	31 f0       	breq	.+12     	; 0x1e4 <lcd_string2+0x1c>
 1d8:	21 96       	adiw	r28, 0x01	; 1
 1da:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_wr_char>
 1de:	89 91       	ld	r24, Y+
 1e0:	81 11       	cpse	r24, r1
 1e2:	fb cf       	rjmp	.-10     	; 0x1da <lcd_string2+0x12>
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <lcd_start>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	8f e9       	ldi	r24, 0x9F	; 159
 1ec:	9f e0       	ldi	r25, 0x0F	; 15
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_start+0x4>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_start+0xa>
 1f4:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_command_port,RS);				//RS=0 --- Command Input
 1f6:	88 98       	cbi	0x11, 0	; 17
	lcd_data_port = 0x30;				//Sending 3 (0011 0000)
 1f8:	80 e3       	ldi	r24, 0x30	; 48
 1fa:	81 bb       	out	0x11, r24	; 17
	sbit(lcd_command_port,EN);				//Set Enable Pin
 1fc:	89 9a       	sbi	0x11, 1	; 17
 1fe:	ef e1       	ldi	r30, 0x1F	; 31
 200:	fe e4       	ldi	r31, 0x4E	; 78
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_start+0x18>
 206:	00 c0       	rjmp	.+0      	; 0x208 <lcd_start+0x1e>
 208:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_command_port,EN);				//Clear Enable Pin
 20a:	89 98       	cbi	0x11, 1	; 17
 20c:	ef e9       	ldi	r30, 0x9F	; 159
 20e:	ff e0       	ldi	r31, 0x0F	; 15
 210:	31 97       	sbiw	r30, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_start+0x26>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_start+0x2c>
 216:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_command_port,RS);				//RS=0 --- Command Input
 218:	88 98       	cbi	0x11, 0	; 17
	lcd_data_port = 0x30;				//Sending 3
 21a:	81 bb       	out	0x11, r24	; 17
	sbit(lcd_command_port,EN);				//Set Enable Pin
 21c:	89 9a       	sbi	0x11, 1	; 17
 21e:	ef e1       	ldi	r30, 0x1F	; 31
 220:	fe e4       	ldi	r31, 0x4E	; 78
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_start+0x38>
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_start+0x3e>
 228:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_command_port,EN);				//Clear Enable Pin
 22a:	89 98       	cbi	0x11, 1	; 17
 22c:	ef e9       	ldi	r30, 0x9F	; 159
 22e:	ff e0       	ldi	r31, 0x0F	; 15
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <lcd_start+0x46>
 234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_start+0x4c>
 236:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_command_port,RS);				//RS=0 --- Command Input
 238:	88 98       	cbi	0x11, 0	; 17
	lcd_data_port = 0x30;				//Sending 3
 23a:	81 bb       	out	0x11, r24	; 17
	sbit(lcd_command_port,EN);				//Set Enable Pin
 23c:	89 9a       	sbi	0x11, 1	; 17
 23e:	8f e1       	ldi	r24, 0x1F	; 31
 240:	9e e4       	ldi	r25, 0x4E	; 78
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_start+0x58>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_start+0x5e>
 248:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_command_port,EN);				//Clear Enable Pin
 24a:	89 98       	cbi	0x11, 1	; 17
 24c:	ef e9       	ldi	r30, 0x9F	; 159
 24e:	ff e0       	ldi	r31, 0x0F	; 15
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_start+0x66>
 254:	00 c0       	rjmp	.+0      	; 0x256 <lcd_start+0x6c>
 256:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_command_port,RS);				//RS=0 --- Command Input
 258:	88 98       	cbi	0x11, 0	; 17
	lcd_data_port = 0x20;				//Sending 2 to initialize LCD 4-bit mode
 25a:	80 e2       	ldi	r24, 0x20	; 32
 25c:	81 bb       	out	0x11, r24	; 17
	//lcd_data_port = 0x10;				
	sbit(lcd_command_port,EN);				//Set Enable Pin
 25e:	89 9a       	sbi	0x11, 1	; 17
 260:	8f e9       	ldi	r24, 0x9F	; 159
 262:	9f e0       	ldi	r25, 0x0F	; 15
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_start+0x7a>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_start+0x80>
 26a:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_command_port,EN);				//Clear Enable Pin
 26c:	89 98       	cbi	0x11, 1	; 17
 26e:	ef e9       	ldi	r30, 0x9F	; 159
 270:	ff e0       	ldi	r31, 0x0F	; 15
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <lcd_start+0x88>
 276:	00 c0       	rjmp	.+0      	; 0x278 <lcd_start+0x8e>
 278:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 27a:	88 e2       	ldi	r24, 0x28	; 40
 27c:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
 286:	8c e0       	ldi	r24, 0x0C	; 12
 288:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to beginning of first line
 28c:	80 e8       	ldi	r24, 0x80	; 128
 28e:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_command>
 292:	08 95       	ret

00000294 <init_devices>:
	lcd_port_config();
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
 294:	f8 94       	cli
	lcd_start();
 296:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_start>
	sei();   //Enables the global interrupts
 29a:	78 94       	sei
 29c:	08 95       	ret

0000029e <main>:
#define sbit(reg,bit)	reg |= (1<<bit)			// Macro defined for Setting a bit of any register.
#define cbit(reg,bit)	reg &= ~(1<<bit)		// Macro defined for Clearing a bit of any register.

void port_config (void)
{
	lcd_port_config();
 29e:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_port_config>
		_delay_ms(1000);
	}
	*/
	
	port_config();
	init_devices();
 2a2:	0e 94 4a 01 	call	0x294	; 0x294 <init_devices>
	
	lcd_string2(1, 1, "Hello World");	
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	51 e0       	ldi	r21, 0x01	; 1
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_string2>
 2b2:	ff cf       	rjmp	.-2      	; 0x2b2 <main+0x14>

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>

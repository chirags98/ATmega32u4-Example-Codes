
Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  000003ec  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  00800170  00800170  000004f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001032  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfd  00000000  00000000  00001602  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ed  00000000  00000000  000021ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  000026ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f4  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ac  00000000  00000000  00002df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000031a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
   4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  2c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  40:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  54:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  58:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  5c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  60:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  64:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_25>
  68:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_26>
  6c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  70:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  78:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  7c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  80:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  84:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  88:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  8c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  90:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  94:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  98:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  9c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	42 75       	andi	r20, 0x52	; 82
  ae:	66 66       	ori	r22, 0x66	; 102
  b0:	65 72       	andi	r22, 0x25	; 37
  b2:	20 6f       	ori	r18, 0xF0	; 240
  b4:	76 65       	ori	r23, 0x56	; 86
  b6:	72 66       	ori	r23, 0x62	; 98
  b8:	6c 6f       	ori	r22, 0xFC	; 252
  ba:	77 20       	and	r7, r7
  bc:	65 72       	andi	r22, 0x25	; 37
  be:	72 6f       	ori	r23, 0xF2	; 242
  c0:	72 3a       	cpi	r23, 0xA2	; 162
  c2:	20 00       	.word	0x0020	; ????

000000c4 <__c.2076>:
  c4:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  d4:	6f 72 3a 20 00                                      or: .

000000d9 <__c.2074>:
  d9:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  e9:	3a 20 00                                            : .

000000ec <__c.2072>:
  ec:	53 74 72 69 6e 67 20 73 74 6f 72 65 64 20 69 6e     String stored in
  fc:	20 46 4c 41 53 48 0a 00                              FLASH..

00000104 <__ctors_end>:
 104:	11 24       	eor	r1, r1
 106:	1f be       	out	0x3f, r1	; 63
 108:	cf ef       	ldi	r28, 0xFF	; 255
 10a:	da e0       	ldi	r29, 0x0A	; 10
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
 110:	11 e0       	ldi	r17, 0x01	; 1
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b1 e0       	ldi	r27, 0x01	; 1
 116:	ec ee       	ldi	r30, 0xEC	; 236
 118:	f3 e0       	ldi	r31, 0x03	; 3
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
 11c:	05 90       	lpm	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	a0 37       	cpi	r26, 0x70	; 112
 122:	b1 07       	cpc	r27, r17
 124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	a0 e7       	ldi	r26, 0x70	; 112
 12a:	b1 e0       	ldi	r27, 0x01	; 1
 12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
 12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
 130:	a7 3b       	cpi	r26, 0xB7	; 183
 132:	b2 07       	cpc	r27, r18
 134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
 136:	0e 94 a1 00 	call	0x142	; 0x142 <main>
 13a:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_exit>

0000013e <__bad_interrupt>:
 13e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000142 <main>:
/* Define UART buad rate here */
#define UART_BAUD_RATE      9600      


int main(void)
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	27 97       	sbiw	r28, 0x07	; 7
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
 156:	87 e6       	ldi	r24, 0x67	; 103
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
 15e:	78 94       	sei
     *  The string is buffered by the uart library in a circular buffer
     *  and one character at a time is transmitted to the UART using interrupts.
     *  uart_puts() blocks if it can not write the whole string to the circular 
     *  buffer
     */
    uart_puts("String stored in SRAM\n");
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 9e 01 	call	0x33c	; 0x33c <uart_puts>
    
    /*
     * Transmit string from program memory to UART
     */
    uart_puts_P("String stored in FLASH\n");
 168:	8c ee       	ldi	r24, 0xEC	; 236
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 ad 01 	call	0x35a	; 0x35a <uart_puts_p>

	if(bluetooth == 1)
 170:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
 174:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <__data_end+0x1>
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	29 f4       	brne	.+10     	; 0x186 <main+0x44>
	uart_puts("Configured for returning chars over bluetooth\n");
 17c:	87 e1       	ldi	r24, 0x17	; 23
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 9e 01 	call	0x33c	; 0x33c <uart_puts>
 184:	04 c0       	rjmp	.+8      	; 0x18e <main+0x4c>
	else
	uart_puts("Configured for returning chars over FTDI\n");
 186:	86 e4       	ldi	r24, 0x46	; 70
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 9e 01 	call	0x33c	; 0x33c <uart_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 18e:	4a e0       	ldi	r20, 0x0A	; 10
 190:	be 01       	movw	r22, r28
 192:	6f 5f       	subi	r22, 0xFF	; 255
 194:	7f 4f       	sbci	r23, 0xFF	; 255
 196:	86 e8       	ldi	r24, 0x86	; 134
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 bf 01 	call	0x37e	; 0x37e <__itoa_ncheck>
    /* 
     * Use standard avr-libc functions to convert numbers into string
     * before transmitting via UART
     */     
    itoa( num, buffer, 10);   // convert interger into string (decimal format)         
    uart_puts(buffer);        // and transmit string to UART
 19e:	ce 01       	movw	r24, r28
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	0e 94 9e 01 	call	0x33c	; 0x33c <uart_puts>
    
    /*
     * Transmit single character to UART
     */
    uart_putc('\r');
 1a6:	8d e0       	ldi	r24, 0x0D	; 13
 1a8:	0e 94 89 01 	call	0x312	; 0x312 <uart_putc>
         * in the higher byte (bitmask) the last receive error
         * UART_NO_DATA is returned when no data is available.
         *
         */
		
        c = uart_getc();
 1ac:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <uart_getc>
 1b0:	8c 01       	movw	r16, r24
        if ( c & UART_NO_DATA )
 1b2:	90 fd       	sbrc	r25, 0
 1b4:	fb cf       	rjmp	.-10     	; 0x1ac <main+0x6a>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
 1b6:	94 ff       	sbrs	r25, 4
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <main+0x80>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
 1ba:	89 ed       	ldi	r24, 0xD9	; 217
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 ad 01 	call	0x35a	; 0x35a <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
 1c2:	13 ff       	sbrs	r17, 3
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <main+0x8c>
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
 1c6:	84 ec       	ldi	r24, 0xC4	; 196
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 ad 01 	call	0x35a	; 0x35a <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
 1ce:	11 ff       	sbrs	r17, 1
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <main+0x98>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
 1d2:	8c ea       	ldi	r24, 0xAC	; 172
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 ad 01 	call	0x35a	; 0x35a <uart_puts_p>
            }
            /* 
             * send received character back
             */
						
            uart_putc( (unsigned char)c );
 1da:	80 2f       	mov	r24, r16
 1dc:	0e 94 89 01 	call	0x312	; 0x312 <uart_putc>
			
			
			if(bluetooth == 1)
 1e0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
 1e4:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <__data_end+0x1>
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	01 f7       	brne	.-64     	; 0x1ac <main+0x6a>
				//uart_puts("\n");
						 
				/*
				 * Transmit single character to UART
				 */
				uart_putc('\r');	
 1ec:	8d e0       	ldi	r24, 0x0D	; 13
 1ee:	0e 94 89 01 	call	0x312	; 0x312 <uart_putc>
 1f2:	dc cf       	rjmp	.-72     	; 0x1ac <main+0x6a>

000001f4 <__vector_25>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	2f 93       	push	r18
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 208:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    data = UART0_DATA;
 20c:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
#elif defined(FE1) && defined(DOR1) && defined(UPE1)
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
 210:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 212:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <UART_RxHead>
 216:	ef 5f       	subi	r30, 0xFF	; 255
 218:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 21a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <UART_RxTail>
 21e:	e9 17       	cp	r30, r25
 220:	39 f0       	breq	.+14     	; 0x230 <__vector_25+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 222:	e0 93 74 01 	sts	0x0174, r30	; 0x800174 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	e9 58       	subi	r30, 0x89	; 137
 22a:	fe 4f       	sbci	r31, 0xFE	; 254
 22c:	20 83       	st	Z, r18
 22e:	01 c0       	rjmp	.+2      	; 0x232 <__vector_25+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 230:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 232:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <UART_LastRxError>
 236:	89 2b       	or	r24, r25
 238:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <UART_LastRxError>
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	2f 91       	pop	r18
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <__vector_26>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 262:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <UART_TxHead>
 266:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <UART_TxTail>
 26a:	98 17       	cp	r25, r24
 26c:	69 f0       	breq	.+26     	; 0x288 <__vector_26+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 26e:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <UART_TxTail>
 272:	ef 5f       	subi	r30, 0xFF	; 255
 274:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 276:	e0 93 75 01 	sts	0x0175, r30	; 0x800175 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	e9 56       	subi	r30, 0x69	; 105
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	80 81       	ld	r24, Z
 282:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 286:	05 c0       	rjmp	.+10     	; 0x292 <__vector_26+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 288:	e9 ec       	ldi	r30, 0xC9	; 201
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	8f 7d       	andi	r24, 0xDF	; 223
 290:	80 83       	st	Z, r24
    }
}
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 2a4:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <UART_TxHead>
    UART_TxTail = 0;
 2a8:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <UART_TxTail>
    UART_RxHead = 0;
 2ac:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <UART_RxHead>
    UART_RxTail = 0;
 2b0:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <UART_RxTail>
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 2b4:	99 23       	and	r25, r25
 2b6:	1c f4       	brge	.+6      	; 0x2be <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 2b8:	22 e0       	ldi	r18, 0x02	; 2
 2ba:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 2be:	90 78       	andi	r25, 0x80	; 128
 2c0:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 2c4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 2c8:	88 e9       	ldi	r24, 0x98	; 152
 2ca:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 2ce:	86 e0       	ldi	r24, 0x06	; 6
 2d0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 2d4:	08 95       	ret

000002d6 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
 2d6:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <UART_RxHead>
 2da:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <UART_RxTail>
 2de:	98 17       	cp	r25, r24
 2e0:	a9 f0       	breq	.+42     	; 0x30c <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 2e2:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <UART_RxTail>
 2e6:	9f 5f       	subi	r25, 0xFF	; 255
 2e8:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 2ea:	e9 2f       	mov	r30, r25
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	e9 58       	subi	r30, 0x89	; 137
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 2f4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <UART_LastRxError>
    
    /* store buffer index */
    UART_RxTail = tmptail; 
 2f8:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <UART_RxTail>
    
    UART_LastRxError = 0;
 2fc:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <UART_LastRxError>
    return (lastRxError << 8) + data;
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	98 2f       	mov	r25, r24
 304:	88 27       	eor	r24, r24
 306:	82 0f       	add	r24, r18
 308:	91 1d       	adc	r25, r1
 30a:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 310:	08 95       	ret

00000312 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 312:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <UART_TxHead>
 316:	2f 5f       	subi	r18, 0xFF	; 255
 318:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 31a:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <UART_TxTail>
 31e:	29 17       	cp	r18, r25
 320:	e1 f3       	breq	.-8      	; 0x31a <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 322:	e2 2f       	mov	r30, r18
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	e9 56       	subi	r30, 0x69	; 105
 328:	fe 4f       	sbci	r31, 0xFE	; 254
 32a:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 32c:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 330:	e9 ec       	ldi	r30, 0xC9	; 201
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	80 62       	ori	r24, 0x20	; 32
 338:	80 83       	st	Z, r24
 33a:	08 95       	ret

0000033c <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	ec 01       	movw	r28, r24
    while (*s) 
 342:	88 81       	ld	r24, Y
 344:	88 23       	and	r24, r24
 346:	31 f0       	breq	.+12     	; 0x354 <uart_puts+0x18>
 348:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 34a:	0e 94 89 01 	call	0x312	; 0x312 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 34e:	89 91       	ld	r24, Y+
 350:	81 11       	cpse	r24, r1
 352:	fb cf       	rjmp	.-10     	; 0x34a <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 35e:	ec 01       	movw	r28, r24
 360:	21 96       	adiw	r28, 0x01	; 1
 362:	fc 01       	movw	r30, r24
 364:	84 91       	lpm	r24, Z
 366:	88 23       	and	r24, r24
 368:	39 f0       	breq	.+14     	; 0x378 <uart_puts_p+0x1e>
      uart_putc(c);
 36a:	0e 94 89 01 	call	0x312	; 0x312 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 36e:	fe 01       	movw	r30, r28
 370:	84 91       	lpm	r24, Z
 372:	21 96       	adiw	r28, 0x01	; 1
 374:	81 11       	cpse	r24, r1
 376:	f9 cf       	rjmp	.-14     	; 0x36a <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <__itoa_ncheck>:
 37e:	bb 27       	eor	r27, r27
 380:	4a 30       	cpi	r20, 0x0A	; 10
 382:	31 f4       	brne	.+12     	; 0x390 <__itoa_ncheck+0x12>
 384:	99 23       	and	r25, r25
 386:	22 f4       	brpl	.+8      	; 0x390 <__itoa_ncheck+0x12>
 388:	bd e2       	ldi	r27, 0x2D	; 45
 38a:	90 95       	com	r25
 38c:	81 95       	neg	r24
 38e:	9f 4f       	sbci	r25, 0xFF	; 255
 390:	0c 94 cb 01 	jmp	0x396	; 0x396 <__utoa_common>

00000394 <__utoa_ncheck>:
 394:	bb 27       	eor	r27, r27

00000396 <__utoa_common>:
 396:	fb 01       	movw	r30, r22
 398:	55 27       	eor	r21, r21
 39a:	aa 27       	eor	r26, r26
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	aa 1f       	adc	r26, r26
 3a2:	a4 17       	cp	r26, r20
 3a4:	10 f0       	brcs	.+4      	; 0x3aa <__utoa_common+0x14>
 3a6:	a4 1b       	sub	r26, r20
 3a8:	83 95       	inc	r24
 3aa:	50 51       	subi	r21, 0x10	; 16
 3ac:	b9 f7       	brne	.-18     	; 0x39c <__utoa_common+0x6>
 3ae:	a0 5d       	subi	r26, 0xD0	; 208
 3b0:	aa 33       	cpi	r26, 0x3A	; 58
 3b2:	08 f0       	brcs	.+2      	; 0x3b6 <__utoa_common+0x20>
 3b4:	a9 5d       	subi	r26, 0xD9	; 217
 3b6:	a1 93       	st	Z+, r26
 3b8:	00 97       	sbiw	r24, 0x00	; 0
 3ba:	79 f7       	brne	.-34     	; 0x39a <__utoa_common+0x4>
 3bc:	b1 11       	cpse	r27, r1
 3be:	b1 93       	st	Z+, r27
 3c0:	11 92       	st	Z+, r1
 3c2:	cb 01       	movw	r24, r22
 3c4:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <strrev>

000003c8 <strrev>:
 3c8:	dc 01       	movw	r26, r24
 3ca:	fc 01       	movw	r30, r24
 3cc:	67 2f       	mov	r22, r23
 3ce:	71 91       	ld	r23, Z+
 3d0:	77 23       	and	r23, r23
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <strrev+0x4>
 3d4:	32 97       	sbiw	r30, 0x02	; 2
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <strrev+0x18>
 3d8:	7c 91       	ld	r23, X
 3da:	6d 93       	st	X+, r22
 3dc:	70 83       	st	Z, r23
 3de:	62 91       	ld	r22, -Z
 3e0:	ae 17       	cp	r26, r30
 3e2:	bf 07       	cpc	r27, r31
 3e4:	c8 f3       	brcs	.-14     	; 0x3d8 <strrev+0x10>
 3e6:	08 95       	ret

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>
